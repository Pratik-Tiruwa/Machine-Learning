# -*- coding: utf-8 -*-
"""Linear_Regression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19-Zg_sBp2FnBVFzeyfJahUnOXNM7CkKb

**Practical 01 : ** Implement Linear Regression (Diabetes Datasets)
"""



# Import Libraries

import numpy as np
import matplotlib.pyplot as plt
from sklearn import datasets, linear_model, metrics
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score
import seaborn as sns

# Load the diabetes datasets

diabetes = datasets.load_diabetes()

diabetes

# X - feature vectors
# y - Target values

X = diabetes.data
y = diabetes.target

# Splitting X and y into training and testing sets

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=1)

# Create linear regression object

lin_reg = linear_model.LinearRegression()

lin_reg

# Train the model using train and test data

lin_reg.fit(X_train, y_train)

# Predict values for X_test data

predicted = lin_reg.predict(X_test)

# Regression coefficients

print('\n Coefficients are:\n ', lin_reg.coef_)

# Intercept

print('\n Intercept : ', lin_reg.intercept_)

# variance score : 1 means perfect prediction

print('Variance score : ', lin_reg.score(X_test, y_test))

# Commented out IPython magic to ensure Python compatibility.
# Mean Squared Error

print("Mean Squared Error: %.2f\n"
#       % mean_squared_error(y_test, predicted))

# Orignal data of X_test

expected = y_test

expected

# Plot a graph for exptected and predicted values

plt.title('Linear Regression (DIABETES Dataset)')
plt.scatter(expected, predicted, c='b', marker='.',s=36)
plt.plot(np.linspace(0, 330, 100), np.linspace(0, 330, 100), '--r', linewidth=2)

plt.show()